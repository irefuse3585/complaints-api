"""
src/models/complaint.py

SQLAlchemy model for the complaints table, with
rich docstrings and column comments
to enable clean autogenerated documentation.
"""

from sqlalchemy import Column, DateTime
from sqlalchemy import Enum as SQLEnum
from sqlalchemy import Integer, String
from sqlalchemy.sql import func

from ..schemas.enums import CategoryEnum, SentimentEnum, StatusEnum
from . import Base


class Complaint(Base):
    """
    Represents a customer complaint record.

    Attributes:
        id (int): Auto-incremented unique identifier.
        text (str): Text of the complaint.
        status (StatusEnum): Current status, either OPEN or CLOSED.
        timestamp (datetime): Creation timestamp, set automatically.
        sentiment (SentimentEnum): Sentiment analysis result.
        category (CategoryEnum): Complaint category.
    """

    __tablename__ = "complaints"
    __table_args__ = {
        "comment": "Table of customer complaints with sentiment and category metadata"  # noqa: E501
    }

    id = Column(
        Integer,
        primary_key=True,
        index=True,
        comment="Primary key: unique complaint ID",
    )
    text = Column(
        String, nullable=False, comment="Complaint text provided by the user"
    )  # noqa: E501
    status = Column(
        SQLEnum(StatusEnum),
        default=StatusEnum.OPEN,
        nullable=False,
        comment="Complaint status: open or closed",
    )
    timestamp = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False,
        comment="Timestamp when this record was created",
    )
    sentiment = Column(
        SQLEnum(SentimentEnum),
        default=SentimentEnum.UNKNOWN,
        nullable=False,
        comment="Sentiment analysis outcome: positive, negative, neutral, or unknown",  # noqa: E501
    )
    category = Column(
        SQLEnum(CategoryEnum),
        default=CategoryEnum.OTHER,
        nullable=False,
        comment="Complaint category: technical, payment, or other",
    )
