"""
src/routers/complaints.py

FastAPI router for complaint endpoints, with autogenerated OpenAPI docs
from docstrings and Pydantic models.
"""

from datetime import datetime
from typing import List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query, Request, status
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession

from ..core.dependencies import get_db
from ..schemas.complaint import ComplaintCreate, ComplaintResponse
from ..schemas.enums import StatusEnum
from ..services.complaint_service import (  # type: ignore[attr-defined]  # noqa: E501
    ComplaintService,
)

router = APIRouter(prefix="/complaints", tags=["complaints"])

# Module-level defaults to avoid B008
STATUS_QUERY = Query(
    None,
    description="Filter by status",
)
SINCE_QUERY = Query(
    None,
    description="Only complaints created after this timestamp",
)
DB_DEP = Depends(get_db)


@router.post(
    "/",
    response_model=ComplaintResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new complaint",
    description=(
        "Accepts complaint text, analyzes sentiment, "
        "saves to DB, returns record."  # noqa: E501
    ),
)
async def create_complaint_endpoint(
    payload: ComplaintCreate,
    request: Request,
    db: AsyncSession = DB_DEP,
) -> ComplaintResponse:
    """
    Endpoint to submit a new complaint.
    - **payload.text**: text of the complaint
    """
    xff = request.headers.get("X-Forwarded-For")
    if xff:
        client_ip = xff.split(",")[0].strip()
    else:
        client_ip = request.scope.get("client", ("", None))[0]

    service = ComplaintService(db)
    try:
        return await service.create_complaint(payload, client_ip)
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal error while creating complaint",
        )


@router.get(
    "/{complaint_id}",
    response_model=ComplaintResponse,
    status_code=status.HTTP_200_OK,
    summary="Get a complaint by ID",
    description="Retrieve a complaint record by its unique ID.",
)
async def read_complaint_endpoint(
    complaint_id: int,
    db: AsyncSession = DB_DEP,
) -> ComplaintResponse:
    """
    Endpoint to get complaint details.
    - **complaint_id**: integer ID of the complaint
    """
    service = ComplaintService(db)
    complaint = await service.get_complaint_by_id(complaint_id)
    if not complaint:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Complaint not found",
        )
    return complaint


@router.get(
    "/",
    response_model=List[ComplaintResponse],
    status_code=status.HTTP_200_OK,
    summary="List complaints (with optional filters)",
    description=(
        "Retrieve complaints, optionally filtering by status "
        "and timestamp (for n8n)."
    ),
)
async def list_complaints_endpoint(
    status: Optional[StatusEnum] = STATUS_QUERY,
    since: Optional[datetime] = SINCE_QUERY,
    db: AsyncSession = DB_DEP,
) -> List[ComplaintResponse]:
    """
    Endpoint to get a list of complaints, filterable by status and timestamp.
    Useful for n8n workflows.
    """
    service = ComplaintService(db)
    return await service.get_complaints(status=status, since=since)


class StatusUpdate(BaseModel):
    status: StatusEnum


@router.patch(
    "/{complaint_id}/status",
    response_model=ComplaintResponse,
    status_code=status.HTTP_200_OK,
    summary="Update complaint status",
    description=(
        "Update status (e.g., close) of a complaint by ID " "(for n8n)."
    ),  # noqa: E501
)
async def update_complaint_status_endpoint(
    complaint_id: int,
    status_update: StatusUpdate,
    db: AsyncSession = DB_DEP,
) -> ComplaintResponse:
    """
    Endpoint to update complaint status (e.g., close/open) by ID.
    Designed for n8n automations.
    """
    service = ComplaintService(db)
    complaint = await service.update_complaint_status(
        complaint_id, status_update.status
    )
    if not complaint:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Complaint not found",
        )
    return complaint
