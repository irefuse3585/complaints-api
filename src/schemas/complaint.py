"""
src/schemas/complaint.py

Pydantic schemas for complaint creation and response, with detailed
docstrings and Field descriptions for autogenerated OpenAPI docs.
"""

from datetime import datetime

from pydantic import BaseModel, Field
from pydantic_settings import SettingsConfigDict

from .enums import CategoryEnum, SentimentEnum, StatusEnum


class ComplaintCreate(BaseModel):
    """
    Schema for creating a new complaint.

    Attributes:
        text: The content of the complaint submitted by the user.
    """

    text: str = Field(
        ..., description="Complaint text provided by the user"
    )  # noqa: E501


class ComplaintResponse(BaseModel):
    """
    Schema for returning complaint details in API responses.

    Attributes:
        id: Unique identifier of the complaint.
        text: Original text of the complaint.
        status: Current status of the complaint (open or closed).
        sentiment: Sentiment analysis result.
        category: Categorization of the complaint.
        timestamp: Timestamp when the complaint was created.
    """

    id: int = Field(..., description="Unique complaint ID")
    status: StatusEnum = Field(
        ..., description="Current status of the complaint"
    )  # noqa: E501
    sentiment: SentimentEnum = Field(
        ..., description="Sentiment analysis outcome"
    )  # noqa: E501
    category: CategoryEnum = Field(
        ..., description="Assigned complaint category"
    )  # noqa: E501

    model_config = SettingsConfigDict(from_attributes=True)


class ComplaintWithTextResponse(BaseModel):
    """
    Schema for returning complaint details including original text
    (for internal workflows such as n8n).

    Attributes:
        id: Unique identifier of the complaint.
        text: Original text of the complaint.
        status: Current status of the complaint (open or closed).
        sentiment: Sentiment analysis result.
        category: Categorization of the complaint.
        timestamp: Timestamp when the complaint was created.
    """

    id: int = Field(..., description="Unique complaint ID")
    text: str = Field(..., description="Original text of the complaint")  # noqa: E501
    status: StatusEnum = Field(
        ..., description="Current status of the complaint"
    )  # noqa: E501
    sentiment: SentimentEnum = Field(
        ..., description="Sentiment analysis outcome"
    )  # noqa: E501
    category: CategoryEnum = Field(
        ..., description="Assigned complaint category"
    )  # noqa: E501
    timestamp: datetime = Field(
        ..., description="Timestamp when the complaint was created"
    )  # noqa: E501

    model_config = SettingsConfigDict(from_attributes=True)
